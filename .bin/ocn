#!/bin/bash
# usage:    ocn <type> <openshiftnamspace-without-nonprod/prod> <build_name> <env_staging_or_production> <am_app_id> <am_app_name> <db_pass_key>
# example:  ocn spring  t-shiftbook                             shiftbook    staging                     123         tshiftbook db/ma_vmars_test
img_type=${1}
app_name=${3}
build_name="${app_name}-${img_type}"
stage=${4}
amappid=${5}
amappname=${6}
db_pass_key=${7}
db_secret_name="${app_name}-db-key"
redis_secret_name='redis-password'
redis_profile="redis"

if [ $stage = 'production' ]; then
    project_name="${2}-prod"
    domain_base=".ocp01.az.lhtcloud.com"
else
    project_name="${2}-nonprod"
    domain_base=".app.lht.ham.dlh.de"
fi
pass_redis_key="lht/redis"

if [ $stage = 'production' ] && [ $img_type = 'spring' ]; then
    url_pref="${app_name}"
elif [ $stage = 'staging' ] && [ $img_type = 'spring' ]; then
    url_pref="${app_name}-test"
elif [ $stage = 'production' ] && [ $img_type = 'ng' ]; then
    url_pref="ng-${app_name}"
elif [ $stage = 'staging' ] && [ $img_type = 'ng' ]; then
    url_pref="ng-${app_name}-test"
fi

oc project $project_name

if [ $img_type = 'spring' ]; then
    opt_db_pass=$(oc get secret | grep $db_secret_name)
    if [ -z "$opt_db_pass" ]; then
        pw_db=$(pass show "$db_pass_key" | head -n 1)
        oc create secret generic $db_secret_name --from-literal=DB_PASS=$pw_db
    fi

    #oc new-build --name $build_name custom-images/openjdk18-openshift --binary=true
    oc new-build --name $build_name custom-images/lht-platform-java11 --binary=true

    ocb spring $project_name $build_name

    oc new-app $build_name

    oc rollout pause dc/$build_name

    oc expose svc $build_name --hostname="${url_pref}${domain_base}" --port 8080-tcp
    if [ $stage = 'production' ]; then
        oc expose svc $build_name --hostname="${url_pref}-extern${domain_base}" --port 8080-tcp -l "internet=true" --name "${build_name}-extern"
        oc scale dc/$build_name --replicas 2
    fi

    oc set env dc/$build_name SPRING_PROFILES_ACTIVE="${stage},${redis_profile}"
    oc set env dc/$build_name APP_ID=$amappid
    oc set env dc/$build_name AM_APP_NAME=$amappname
    oc set env dc/$build_name BATCH_LEADER_PRIORITY=2
    oc set env dc/$build_name LD_LIBRARY_PATH=/deployments
    oc set env dc/$build_name AM_CERT=/deployments/am-client.cert
    #oc set env dc/$build_name TRUST_STORE=/deployments/.truststore
    oc set env dc/$build_name JAVA_OPTIONS="-Xms500m -Xmx1000m -Dfile.encoding=UTF8"
    oc set env dc/$build_name GC_MAX_METASPACE_SIZE="200"
    oc set env dc/$build_name TZ="Europe/Berlin"

    oc set env --from=secret/${redis_secret_name} dc/$build_name
    oc set env --from=secret/${db_secret_name} dc/$build_name

    oc rollout resume dc/$build_name

    oc set triggers --remove --from-config=true dc/$build_name

    echo "oc edit route $build_name"
    echo "under spec add"
    echo "tls:"
    echo "   insecureEdgeTerminationPolicy: Redirect"
    echo "   termination: edge"

    echo "---"

    echo "oc edit dc $build_name"
    echo "under spec.template.spec.container add"
    echo "livenessProbe:"
    echo "  httpGet:"
    echo "    path: /actuator/health"
    echo "    port: 8080"
    echo "    scheme: HTTP"
    echo "  initialDelaySeconds: 180"
    echo "readinessProbe:"
    echo "  httpGet:"
    echo "    path: /actuator/health"
    echo "    port: 8080"
    echo "    scheme: HTTP"
    echo "  initialDelaySeconds: 30"
elif [ $img_type = 'redis' ]; then
    opt_redis=$(oc get secret | grep $redis_secret_name)
    if [ -z "$opt_redis" ]; then
        pw_redis=$(pass show "$pass_redis_key" | head -n 1)
        oc create secret generic $redis_secret_name --from-literal=REDIS_PASSWORD=$pw_redis
    fi
    oc new-app --name $build_name --docker-image registry.access.redhat.com/rhscl/redis-32-rhel7
    oc set env --from=secret/${redis_secret_name} dc/$build_name
elif [ $img_type = 'ng' ]; then
    oc new-app --name $build_name custom-images/nginx-112-rhel7~./target/oc_ng

    oc rollout pause dc/$build_name

    ocb ng $project_name $build_name

    oc expose svc $build_name --hostname="${url_pref}${domain_base}"
    if [ $stage = 'production' ]; then
        oc scale dc/$build_name --replicas 2
    fi

    oc set env dc/$build_name APP_ID=$amappid
    oc set env dc/$build_name AM_APP_NAME=$app_name
    oc set env dc/$build_name TZ="Europe/Berlin"

    oc rollout resume dc/$build_name

    oc set triggers --from-config=false dc/$build_name
fi
